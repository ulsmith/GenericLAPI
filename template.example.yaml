AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: generic-lapi

Globals:
  Api:
    Cors:
      AllowMethods: "'GET, POST, PUT, DELETE, OPTIONS, PATCH'"
      AllowHeaders: "'Accept, Cache-Control, Content-Type, Content-Length, Authorization, Pragma, Expires'"
      AllowOrigin: "'*'"
      AllowCredentials: "'*'"
  Function:
    Timeout: 3
    Runtime: nodejs10.x
    Handler: application.handler
    Environment:
      Variables:
        Version: 0.0.1
        Mode: development
        CorsWhitelist: 'http://your-ui-dns-address.com' 
        HostAddress: 'http://localhost:3000'
        JWTKey: ...zCDAieQVC...
        JWTExpireSeconds: 3000
        
        AESKey: fDA...QVC

        PasswordResetExpireSeconds: 600
        
        EmailHost: smtp....com
        EmailPort: 465
        EmailSecureWithTls: true
        EmailUsername: ra....com
        EmailPassword: s...l
        EmailFromAddress: p...t
        EmailFromName: '"No Reply" <no-reply@r....net>'
        
        KnexEngine: 'postgres'
        KnexHost: 'host-address-for-db'
        KnexPort: 5432
        KnexDatabase: 'generic'
        KnexUsername: 'generic'
        KnexPassword: '...dsfdghfgdgh...'

Resources:
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'SecurityGroup for Lambda Serverless Functions'
      VpcId: 'vpc-xxxxx'

  Account:
    Type: AWS::Serverless::Function
    Properties:
      ReservedConcurrentExecutions: 10
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt: LambdaSecurityGroup.GroupId
        SubnetIds:
          - subnet-xxxx1
          - subnet-xxxx2
          - subnet-xxxx3
      Events:
        AccountAuthenticatePost:
          Type: Api
          Properties:
            Path: /account/authenticate
            Method: post
        AccountAuthenticateGet:
          Type: Api
          Properties:
            Path: /account/authenticate
            Method: get
        AccountRefreshPost:
          Type: Api
          Properties:
            Path: /account/refresh
            Method: post
        AccountResetPost:
          Type: Api
          Properties:
            Path: /account/reset
            Method: post
        AccountResetPatch:
          Type: Api
          Properties:
            Path: /account/reset/{token}
            Method: patch

  Identity:
    Type: AWS::Serverless::Function
    Properties:
      ReservedConcurrentExecutions: 10
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt: LambdaSecurityGroup.GroupId
        SubnetIds:
          - subnet-xxxx1
          - subnet-xxxx2
          - subnet-xxxx3
      Events:
        IdentityOrganisationPost:
          Type: Api
          Properties:
            Path: /identity/organisation
            Method: post
        IdentityOrganisationAny:
          Type: Api
          Properties:
            Path: /identity/organisation/{uuid}
            Method: any
        IdentityUserPost:
          Type: Api
          Properties:
            Path: /identity/user
            Method: post
        IdentityUserAny:
          Type: Api
          Properties:
            Path: /identity/user/{uuid}
            Method: any
        IdentityUserAccountPatch:
          Type: Api
          Properties:
            Path: /identity/user-account/{uuid}
            Method: patch
        IdentityDepartmentPost:
          Type: Api
          Properties:
            Path: /identity/department
            Method: post
        IdentityDepartmentAny:
          Type: Api
          Properties:
            Path: /identity/department/{id}
            Method: any

  Health:
    Type: AWS::Serverless::Function
    Properties:
      ReservedConcurrentExecutions: 10
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt: LambdaSecurityGroup.GroupId
        SubnetIds:
          - subnet-xxxx1
          - subnet-xxxx2
          - subnet-xxxx3
      Events:
        AuthenticateGet:
          Type: Api
          Properties:
            Path: /health
            Method: get

  CatchAll:
    Type: AWS::Serverless::Function
    Properties:
      ReservedConcurrentExecutions: 10
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt: LambdaSecurityGroup.GroupId
        SubnetIds:
          - subnet-xxxx1
          - subnet-xxxx2
          - subnet-xxxx3
      ReservedConcurrentExecutions: 10
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /{error+}
            Method: any