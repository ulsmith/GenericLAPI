AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: generic-lapi

Globals:
  Api:
    Cors:
      AllowMethods: "'GET, POST, PUT, DELETE, OPTIONS, PATCH'"
      AllowHeaders: "'Accept, Cache-Control, Content-Type, Content-Length, Authorization, Pragma, Expires'"
      AllowOrigin: "'*'"
      AllowCredentials: "'*'"
  Function:
    Timeout: 3
    Runtime: nodejs10.x
    Handler: application.handler
    Environment:
      Variables:
        # Generic
        VERSION: 0.0.1
        MODE: development
        CORS_LIST: 'http://project7.net:8082,http://192.168.1.99:8082,http://localhost:8082,http://localhost:8081,http://127.0.0.1:8081,http://docker.local' 
        HOST_NAME: 'GenericLAPI'
        HOST_ADDRESS: 'http://localhost:3000'
        
        # Security
        JWT_KEY: zC....pcc
        JWT_EXPIRE_SECONDS: 2592000
        AES_KEY: fDA...eQVC
        TOKEN_EXPIRE_SECONDS: 1800
        ACTIVATE_EXPIRE_SECONDS: 604800
        
        # Email (using SES, just set from account)
        EMAIL_FROM: 'no....@....net'
        EMAIL_TO: 'i...@....net'
        
        # DB
        KNEX_ENGINE: 'postgres'
        KNEX_HOST: '192.168.1.99'
        KNEX_PORT: 5431
        KNEX_DATABASE: 'ddatabase_name'
        KNEX_USERNAME: 'postgres'
        KNEX_PASSWORD: 'nl.....2DD'
        USER_SUPER_ADMIN_USER_GROUP_ID: 1
        USER_BASIC_USER_GROUP_ID: 2

Resources:
  Email:
    Type: AWS::Serverless::Function
    Properties:
      ReservedConcurrentExecutions: 3
      Timeout: 30
      VpcConfig:
        # SG Private with internet access
        SecurityGroupIds:
          - sg-0d7...e0
        # Core A/B subnets with routing for NAT internet access
        SubnetIds:
          - subnet-033...9
          - subnet-08...1f
      Role: !GetAtt LambdaEmailRole.Arn
      Events:
        ContactUsPost:
          Type: Api
          Properties:
            Path: /email/contact-us
            Method: post

  Account:
    Type: AWS::Serverless::Function
    Properties:
      ReservedConcurrentExecutions: 10
      Timeout: 30
      VpcConfig:
        # SG Private with internet access
        SecurityGroupIds:
          - sg-0d.....e0
        # Core A/B with routing for NAT internet access
        SubnetIds:
          - subnet-03...d9
          - subnet-087...81f
      Role: !GetAtt LambdaEmailRole.Arn
      Events:
        AccountAuthenticatePost:
          Type: Api
          Properties:
            Path: /account/authenticate
            Method: post
        AccountAuthenticateGet:
          Type: Api
          Properties:
            Path: /account/authenticate
            Method: get
        AccountRefreshPost:
          Type: Api
          Properties:
            Path: /account/refresh
            Method: post
        AccountResetPost:
          Type: Api
          Properties:
            Path: /account/reset
            Method: post
        AccountResetPatch:
          Type: Api
          Properties:
            Path: /account/reset/{token}
            Method: patch
        AccountRegistrationPost:
          Type: Api
          Properties:
            Path: /account/registration
            Method: post
        AccountRegistrationPatch:
          Type: Api
          Properties:
            Path: /account/registration/{token}
            Method: patch
        AccountActivatePatch:
          Type: Api
          Properties:
            Path: /account/activate/{token}
            Method: patch

  Identity:
    Type: AWS::Serverless::Function
    Properties:
      ReservedConcurrentExecutions: 10
      Timeout: 30
      VpcConfig:
        # SG Private without internet access
        SecurityGroupIds:
          - sg-04a...c1
        # Private A/B with no routing for NAT internet access
        SubnetIds:
          - subnet-09...85
          - subnet-0e...39
      Events:
        IdentityOrganisationPost:
          Type: Api
          Properties:
            Path: /identity/organisation
            Method: post
        IdentityOrganisationAny:
          Type: Api
          Properties:
            Path: /identity/organisation/{id}
            Method: any
        IdentityUserPost:
          Type: Api
          Properties:
            Path: /identity/user
            Method: post
        IdentityUserAny:
          Type: Api
          Properties:
            Path: /identity/user/{id}
            Method: any
        IdentityUsersGet:
          Type: Api
          Properties:
            Path: /identity/users
            Method: get
        IdentityDepartmentPost:
          Type: Api
          Properties:
            Path: /identity/department
            Method: post
        IdentityDepartmentAny:
          Type: Api
          Properties:
            Path: /identity/department/{id}
            Method: any

  System:
    Type: AWS::Serverless::Function
    Properties:
      ReservedConcurrentExecutions: 10
      Timeout: 30
      VpcConfig:
        # SG Private without internet access
        SecurityGroupIds:
          - sg-04a...cc1
        # Private A/B with no routing for NAT internet access
        SubnetIds:
          - subnet-09...85
          - subnet-0e...39
      Events:
        SystemConfigurationAny:
          Type: Api
          Properties:
            Path: /system/configuration/{name}
            Method: any

  Health:
    Type: AWS::Serverless::Function
    Properties:
      ReservedConcurrentExecutions: 10
      Timeout: 30
      VpcConfig:
        # SG Private without internet access
        SecurityGroupIds:
          - sg-04aa...c1
        # Private A/B with no routing for NAT internet access
        SubnetIds:
          - subnet-09c...85
          - subnet-0e3...39
      Events:
        HealthGet:
          Type: Api
          Properties:
            Path: /health
            Method: get

  CatchAll:
    Type: AWS::Serverless::Function
    Properties:
      ReservedConcurrentExecutions: 10
      Timeout: 30
      VpcConfig:
        # SG Private without internet access
        SecurityGroupIds:
          - sg-04...c1
        # Private A/B with no routing for NAT internet access
        SubnetIds:
          - subnet-09...85
          - subnet-0e3...39
      ReservedConcurrentExecutions: 10
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /{error+}
            Method: any

  LambdaEmailRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: LambdaEmailPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: LambdaEmailPermission
            Effect: Allow
            Action:
            - ses:SendEmail
            - ses:SendRawEmail
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DetachNetworkInterface
            - ec2:DeleteNetworkInterface
            - sns:Publish
            - sqs:SendMessage
            - sqs:GetQueueUrl
            - sqs:ListQueues
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            - lambda:InvokeFunction
            - lambda:InvokeAsync
            Resource: '*'
